class Solution {
    public void calIndegree(List<List<Integer>> adj, int[] indegree) {
		for (int i = 0; i < adj.size(); i++) {
			for (int j : adj.get(i)) {
				indegree[j]++;
			}
		}
	}
	
	public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
        	adj.add(new ArrayList<>());
        }
        for (int[] pre : prerequisites) {
        	int course = pre[0];
        	int prereq = pre[1];
        	adj.get(prereq).add(course);
        }
        int[] indegree = new int[numCourses];
        calIndegree(adj, indegree);
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
        	if (indegree[i] == 0) {
        		queue.add(i);
        	}
        }
        List<Integer> graph = new ArrayList<>();
        while (!queue.isEmpty()) {
        	int cur = queue.remove();
        	graph.add(cur);
        	for (int i : adj.get(cur)) {
        		indegree[i]--;
        		if (indegree[i] == 0) {
        			queue.add(i);
        		}
        	}
        }
        if (graph.size() != numCourses) {
        	return new int[0];
        }
        int[] ans = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
        	ans[i] = graph.get(i);
        }
        return ans;
    }
}
