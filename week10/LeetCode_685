class Solution {
    public int[] findRedundantDirectedConnection(int[][] edges) {
	       int[] roots = new int[edges.length + 1];
	       for (int i = 0; i < roots.length; i++) {
	    	   roots[i] = i;
	       }
	       int[] candidate1 = null;
	       int[] candidate2 = null;
	       for (int[] e : edges) {
	    	   int rootx = find(roots, e[0]);
	    	   int rooty = find(roots, e[1]);
	    	   if (rooty != e[1]) {
	    		   candidate1 = e;
	    	   }
	    	   else if (rootx == rooty) {
	    		   candidate2 = e;
	    	   }
	    	   else {
	    		   roots[rooty] = rootx;
	    	   }
	       }
	       if (candidate1 == null) {
	    	   return candidate2;
	       }
	       if (candidate2 == null) {
	    	   return candidate1;
	       }
	       for (int[] e : edges) {
	    	   if (e[1] == candidate1[1]) {
	    		   return e;
	    	   }
	       }
	       return new int[2];
	 }
	 public int find(int[] roots, int i) {
		 if (roots[i] != i) {
			 roots[i] = find(roots, roots[i]);
		 }
		 return roots[i];
	 }
}
