import java.util.*;

class Solution {
   public int openLock(String[] deadends, String target) {
    Set<String> deadendSet = new HashSet<>(Arrays.asList(deadends));
    if (deadendSet.contains("0000") || deadendSet.contains(target)) {
        return -1;
    }
    
    // 如果目標就是起點
    if (target.equals("0000")) {
        return 0;
    }
    
    // 從起點和終點同時開始的兩個集合
    Set<String> beginSet = new HashSet<>();
    Set<String> endSet = new HashSet<>();
    beginSet.add("0000");
    endSet.add(target);
    
    Set<String> visited = new HashSet<>();
    visited.add("0000");
    visited.add(target);
    
    int steps = 0;
    
    while (!beginSet.isEmpty() && !endSet.isEmpty()) {
        // 總是從較小的集合開始搜索，以減少搜索空間
        if (beginSet.size() > endSet.size()) {
            Set<String> temp = beginSet;
            beginSet = endSet;
            endSet = temp;
        }
        
        Set<String> nextBeginSet = new HashSet<>();
        
        for (String combination : beginSet) {
            // 生成所有可能的下一步組合
            for (int i = 0; i < 4; i++) {
                for (int delta : new int[]{1, -1}) {
                    int digit = (combination.charAt(i) - '0' + delta + 10) % 10;
                    String newCombination = combination.substring(0, i) + digit + combination.substring(i + 1);
                    
                    // 如果另一個方向已經訪問過這個組合，則找到了路徑
                    if (endSet.contains(newCombination)) {
                        return steps + 1;
                    }
                    
                    // 如果組合未訪問且不是死角，加入下一輪搜索
                    if (!visited.contains(newCombination) && !deadendSet.contains(newCombination)) {
                        visited.add(newCombination);
                        nextBeginSet.add(newCombination);
                    }
                }
            }
        }
        
        steps++;
        beginSet = nextBeginSet;
    }
    
    return -1; // 目標不可達
}

}
